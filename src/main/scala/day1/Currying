package day1

sealed trait Color
object Color {
  case object Green extends Color
  case object Red extends Color
  case object Blue extends Color
  case object Yellow extends Color
  case object Black extends Color
}

sealed trait Shape {
  case class Circle(radius: Int)
  case class Rectangle(length: Int, breadth: Int)
  case class RightTriangle(base: Int, height: Int)
}

case class ColoredShape(shape: Shape, color: Color)

object Currying {
  def colorShape: Color => Shape => ColoredShape = ???
  def colorShape2(color: Color, shape: Shape): ColoredShape = ???

  def colorShapeGreen = colorShape(Color.Red)
  // this is not possible
//  def colorShapeGreen2 = colorShape2(Color.Red)
}
